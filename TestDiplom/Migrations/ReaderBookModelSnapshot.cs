// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestDiplom.Models;

#nullable disable

namespace TestDiplom.Migrations
{
    [DbContext(typeof(ReaderBook))]
    partial class ReaderBookModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TestDiplom.Models.author", b =>
                {
                    b.Property<long>("creator_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("creator_id"), 1L, 1);

                    b.Property<short?>("country_id")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("date_birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("first_name_author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("patronymic_author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("surname_author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("creator_id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("TestDiplom.Models.author_in_books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId", "AuthorId")
                        .IsUnique();

                    b.ToTable("author_in_books");
                });

            modelBuilder.Entity("TestDiplom.Models.book_storage", b =>
                {
                    b.Property<long>("book_storage_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("book_storage_id"), 1L, 1);

                    b.Property<long>("book_storage_code")
                        .HasColumnType("bigint");

                    b.Property<long>("storage_rooms_id")
                        .HasColumnType("bigint");

                    b.HasKey("book_storage_id");

                    b.HasIndex("book_storage_code");

                    b.HasIndex("storage_rooms_id");

                    b.ToTable("book_stor");
                });

            modelBuilder.Entity("TestDiplom.Models.books", b =>
                {
                    b.Property<long>("book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("book_id"), 1L, 1);

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("year_create")
                        .HasColumnType("bigint");

                    b.HasKey("book_id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("TestDiplom.Models.department", b =>
                {
                    b.Property<short>("department_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("department_id"), 1L, 1);

                    b.Property<string>("appellation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("duties_description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("department_id");

                    b.ToTable("depart");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_cities", b =>
                {
                    b.Property<short>("city_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("city_id"), 1L, 1);

                    b.Property<string>("city_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("city_id");

                    b.ToTable("di_city");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_countries", b =>
                {
                    b.Property<short>("country_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("country_id"), 1L, 1);

                    b.Property<string>("country_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("country_id");

                    b.ToTable("di_country");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_currency", b =>
                {
                    b.Property<short>("currency_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("currency_id"), 1L, 1);

                    b.Property<string>("currency_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("currency_id");

                    b.ToTable("di_currency");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_lang", b =>
                {
                    b.Property<short>("lang_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("lang_id"), 1L, 1);

                    b.Property<string>("lang_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("lang_id");

                    b.ToTable("di_lang");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_regions", b =>
                {
                    b.Property<short>("region_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("region_id"), 1L, 1);

                    b.Property<string>("region_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("region_id");

                    b.ToTable("di_reg");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_storage_rooms", b =>
                {
                    b.Property<long>("stor_rooms_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("stor_rooms_id"), 1L, 1);

                    b.Property<short>("room_code")
                        .HasColumnType("smallint");

                    b.Property<long>("storage_rooms_id")
                        .HasColumnType("bigint");

                    b.HasKey("stor_rooms_id");

                    b.ToTable("di_stor_room");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_thematics", b =>
                {
                    b.Property<short>("theme_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("theme_id"), 1L, 1);

                    b.Property<string>("theme_description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("theme_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("theme_id");

                    b.ToTable("di_them");
                });

            modelBuilder.Entity("TestDiplom.Models.events", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFullDay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ThemeColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EventID");

                    b.ToTable("eventi");
                });

            modelBuilder.Entity("TestDiplom.Models.issuance", b =>
                {
                    b.Property<long>("issuance_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("issuance_id"), 1L, 1);

                    b.Property<long?>("book_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("date_is_Book")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("date_re_Book")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("date_reser")
                        .HasColumnType("datetime2");

                    b.Property<short?>("readerticket_id")
                        .HasColumnType("smallint");

                    b.HasKey("issuance_id");

                    b.ToTable("issuances");
                });

            modelBuilder.Entity("TestDiplom.Models.lines", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<long?>("cost_bo")
                        .HasColumnType("bigint");

                    b.Property<string>("guid")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("title_bok")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("list");
                });

            modelBuilder.Entity("TestDiplom.Models.publi_house", b =>
                {
                    b.Property<short>("publisher_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("publisher_id"), 1L, 1);

                    b.Property<string>("publisher_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("publisher_phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("publisher_id");

                    b.ToTable("publi_h");
                });

            modelBuilder.Entity("TestDiplom.Models.publication", b =>
                {
                    b.Property<long>("publication_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("publication_id"), 1L, 1);

                    b.Property<bool>("availability")
                        .HasColumnType("bit");

                    b.Property<long?>("book_id")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<short?>("book_storage_id")
                        .HasColumnType("smallint");

                    b.Property<short>("book_vol")
                        .HasColumnType("smallint");

                    b.Property<long>("cost_book")
                        .HasColumnType("bigint");

                    b.Property<short?>("country_id")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<short?>("currency_id")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<short?>("lang_id")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<short>("pub_num")
                        .HasColumnType("smallint");

                    b.Property<short>("pub_year")
                        .HasColumnType("smallint");

                    b.Property<short?>("publisher_id")
                        .HasColumnType("smallint");

                    b.Property<long>("сirculation")
                        .HasColumnType("bigint");

                    b.HasKey("publication_id");

                    b.HasIndex("book_id");

                    b.HasIndex("country_id");

                    b.HasIndex("currency_id");

                    b.HasIndex("lang_id");

                    b.ToTable("publi");
                });

            modelBuilder.Entity("TestDiplom.Models.publish_house_places", b =>
                {
                    b.Property<short>("publish_house_places_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("publish_house_places_id"), 1L, 1);

                    b.Property<string>("addr_publihouse")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<short?>("city_id")
                        .HasColumnType("smallint");

                    b.Property<short?>("country_id")
                        .HasColumnType("smallint");

                    b.Property<short?>("publisher_id")
                        .HasColumnType("smallint");

                    b.Property<short?>("region_id")
                        .HasColumnType("smallint");

                    b.HasKey("publish_house_places_id");

                    b.ToTable("publi_hou_pla");
                });

            modelBuilder.Entity("TestDiplom.Models.reader_ticket", b =>
                {
                    b.Property<short>("readerticket_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("readerticket_id"), 1L, 1);

                    b.Property<string>("first_name_visitor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("home_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patronymic_author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("staff_id")
                        .HasColumnType("smallint");

                    b.Property<string>("surname_vistor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ticket_issue_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("vis_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("readerticket_id");

                    b.ToTable("read_ticket");
                });

            modelBuilder.Entity("TestDiplom.Models.staff_eve", b =>
                {
                    b.Property<short>("staff_eve_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("staff_eve_id"), 1L, 1);

                    b.Property<short?>("event_id")
                        .HasColumnType("smallint");

                    b.Property<short?>("staff_id")
                        .HasColumnType("smallint");

                    b.HasKey("staff_eve_id");

                    b.ToTable("sta_eve");
                });

            modelBuilder.Entity("TestDiplom.Models.staffer", b =>
                {
                    b.Property<short>("staff_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("staff_id"), 1L, 1);

                    b.Property<short?>("department_id")
                        .HasColumnType("smallint");

                    b.Property<string>("first_name_staffer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("patronymic_staffer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("surname_staffer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("work_telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("staff_id");

                    b.ToTable("staffers");
                });

            modelBuilder.Entity("TestDiplom.Models.work_days", b =>
                {
                    b.Property<short>("work_day_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("work_day_id"), 1L, 1);

                    b.Property<DateTime>("be_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("days")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("note_time")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ov_time")
                        .HasColumnType("datetime2");

                    b.HasKey("work_day_id");

                    b.ToTable("work_day");
                });

            modelBuilder.Entity("TestDiplom.Models.work_staff", b =>
                {
                    b.Property<short>("work_staff_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("work_staff_id"), 1L, 1);

                    b.Property<short?>("staff_id")
                        .HasColumnType("smallint");

                    b.Property<short?>("work_day_id")
                        .HasColumnType("smallint");

                    b.HasKey("work_staff_id");

                    b.ToTable("work_staffs");
                });

            modelBuilder.Entity("TestDiplom.Models.author_in_books", b =>
                {
                    b.HasOne("TestDiplom.Models.author", "c")
                        .WithMany("connect2")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDiplom.Models.books", "s")
                        .WithMany("connect")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("c");

                    b.Navigation("s");
                });

            modelBuilder.Entity("TestDiplom.Models.book_storage", b =>
                {
                    b.HasOne("TestDiplom.Models.publication", "s")
                        .WithMany("test1")
                        .HasForeignKey("book_storage_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDiplom.Models.dict_storage_rooms", "c")
                        .WithMany("test5")
                        .HasForeignKey("storage_rooms_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("c");

                    b.Navigation("s");
                });

            modelBuilder.Entity("TestDiplom.Models.publication", b =>
                {
                    b.HasOne("TestDiplom.Models.books", "bookes")
                        .WithMany("connect3")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDiplom.Models.dict_countries", "yo3")
                        .WithMany("test4")
                        .HasForeignKey("country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDiplom.Models.dict_currency", "yo1")
                        .WithMany("test2")
                        .HasForeignKey("currency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDiplom.Models.dict_lang", "yo2")
                        .WithMany("test3")
                        .HasForeignKey("lang_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bookes");

                    b.Navigation("yo1");

                    b.Navigation("yo2");

                    b.Navigation("yo3");
                });

            modelBuilder.Entity("TestDiplom.Models.author", b =>
                {
                    b.Navigation("connect2");
                });

            modelBuilder.Entity("TestDiplom.Models.books", b =>
                {
                    b.Navigation("connect");

                    b.Navigation("connect3");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_countries", b =>
                {
                    b.Navigation("test4");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_currency", b =>
                {
                    b.Navigation("test2");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_lang", b =>
                {
                    b.Navigation("test3");
                });

            modelBuilder.Entity("TestDiplom.Models.dict_storage_rooms", b =>
                {
                    b.Navigation("test5");
                });

            modelBuilder.Entity("TestDiplom.Models.publication", b =>
                {
                    b.Navigation("test1");
                });
#pragma warning restore 612, 618
        }
    }
}
